import { Component, Input, Self } from '@angular/core';
import { NgModel } from '@angular/forms';
import { MultiselectConfig } from '../models';
var DropdownMultiselectComponent = (function () {
    function DropdownMultiselectComponent(cd) {
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.cd = cd;
        cd.valueAccessor = this;
        this.cd.viewModel = [];
        this.config = new MultiselectConfig();
        this.autoClose = false;
    }
    DropdownMultiselectComponent.prototype.ngOnInit = function () {
        this.setSelectedTo(false);
        this.processOptions(this.dropdownConfig);
    };
    DropdownMultiselectComponent.prototype.writeValue = function (value) { };
    DropdownMultiselectComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    DropdownMultiselectComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    Object.defineProperty(DropdownMultiselectComponent.prototype, "selectedLength", {
        get: function () {
            return this.cd.viewModel.filter(function (_a) {
                var selected = _a.selected;
                return selected;
            }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownMultiselectComponent.prototype, "buttonLabel", {
        get: function () {
            var count = this.selectedLength;
            var model = this.cd.viewModel;
            var _a = this.config, maxInline = _a.maxInline, buttonLabel = _a.buttonLabel;
            if (count > maxInline || count === 0) {
                return buttonLabel;
            }
            var label = model.reduce(function (prev, _a) {
                var selected = _a.selected, label = _a.label;
                if (!selected)
                    return prev;
                return "" + prev + label + ", ";
            }, '');
            return label.slice(0, label.length - 2);
        },
        enumerable: true,
        configurable: true
    });
    DropdownMultiselectComponent.prototype.toggleRow = function (item) {
        item.selected = !item.selected;
        this.onChange(this.cd.viewModel);
    };
    DropdownMultiselectComponent.prototype.uncheckAll = function () {
        this.setSelectedTo(false);
        this.onChange(this.cd.viewModel);
    };
    DropdownMultiselectComponent.prototype.checkAll = function () {
        this.setSelectedTo(true);
        this.onChange(this.cd.viewModel);
    };
    DropdownMultiselectComponent.prototype.processOptions = function (opts) {
        if (typeof (opts.defaultButtonText) === 'string') {
            this.config.buttonLabel = opts.defaultButtonText;
        }
        if (typeof (opts.allSelected) === 'boolean') {
            this.config.allSelected = opts.allSelected;
            if (this.config.allSelected) {
                this.checkAll();
            }
        }
        if (typeof (opts.showCheckAll) === 'boolean') {
            this.config.showCheckAll = opts.showCheckAll;
        }
        if (typeof (opts.showUncheckAll) === 'boolean') {
            this.config.showUncheckAll = opts.showUncheckAll;
        }
        if (typeof (opts.maxInline) === 'number') {
            this.config.maxInline = opts.maxInline;
        }
        if (Array.isArray(opts.buttonClasses)) {
            this.config.buttonClasses = opts.buttonClasses;
        }
        if (Array.isArray(opts.checkClasses)) {
            this.config.checkClasses = opts.checkClasses;
        }
        if (Array.isArray(opts.uncheckClasses)) {
            this.config.uncheckClasses = opts.uncheckClasses;
        }
        if (typeof (opts.scrollingHeight) === 'number') {
            this.config.scrollingHeight = opts.scrollingHeight;
        }
    };
    DropdownMultiselectComponent.prototype.setSelectedTo = function (val) {
        var newModel = this.cd.viewModel.map(function (item) {
            return Object.assign({}, item, { selected: val });
        });
        this.cd.viewToModelUpdate(newModel);
    };
    return DropdownMultiselectComponent;
}());
export { DropdownMultiselectComponent };
DropdownMultiselectComponent.decorators = [
    { type: Component, args: [{
                selector: 'dropdown-multiselect[ngModel]',
                template: "<div class=\"multiselect-container\" \n                  [autoClose]=\"autoClose\" \n                  dropdown>\n                <button [ngClass]=\"config.buttonClasses\" dropdownToggle>\n                    <span>{{buttonLabel}}</span> ({{selectedLength}})\n                    <span class=\"caret\"></span>\n                </button>\n                <ul class=\"dropdown-menu scrollable-menu\" \n                  role=\"menu\" \n                  [style.max-height]=\"config.scrollingHeight + 'px'\" \n                  *dropdownMenu>\n                    <li *ngIf=\"config.showCheckAll\" [ngClass]=\"{'with-border': !config.showUncheckAll }\" class=\"top-section\">\n                        <a class=\"dropdown-item dropdown-multiselect-clickable\" (click)=\"checkAll()\">\n                            <i *ngIf=\"config.checkClasses.length > 0\" [ngClass]=\"config.checkClasses\"></i>\n                            <input *ngIf=\"config.checkClasses.length === 0\" type=\"checkbox\" name=\"check-all\" checked=\"checked\" readonly />\n                            <span> Check All</span>\n                        </a>\n                    </li>\n                    <li *ngIf=\"config.showUncheckAll\" class=\"top-section with-border\">\n                        <a (click)=\"uncheckAll()\" class=\"dropdown-item dropdown-multiselect-clickable\">\n                            <i *ngIf=\"config.uncheckClasses.length > 0\" [ngClass]=\"config.uncheckClasses\"></i>\n                            <input *ngIf=\"config.uncheckClasses.length === 0\" type=\"checkbox\" name=\"uncheck-all\" readonly />\n                            <span> Uncheck All</span>\n                        </a>\n                    </li>\n                    <li *ngFor=\"let row of cd.viewModel\" role=\"menuitem\">\n                        <a class=\"dropdown-item dropdown-multiselect-clickable\" (click)=\"toggleRow(row)\">\n                            <span class=\"check-area\">\n                              <i *ngIf=\"row.selected && config.checkClasses.length > 0\" [ngClass]=\"config.checkClasses\"></i>\n                              <input *ngIf=\"config.checkClasses.length === 0\" [name]=\"row.id + '-checkbox'\" [(ngModel)]=\"row.selected\" type=\"checkbox\" />\n                            </span>\n                            <span *ngIf=\"row.color\" [style.background-color]=\"row.color\" class=\"row-color\"></span>\n                            <span>{{row.label}}</span>\n                        </a>\n                    </li>\n                </ul>\n            </div>",
                styles: [".multiselect-container {\n                display: inline-block;\n                position: relative; }",
                    ".top-section.with-border {\n                border-bottom: 1px solid #ccc; }",
                    ".with-border > .dropdown-item {\n                margin-bottom: 4px; }",
                    ".with-border {\n               margin-bottom: 4px; }",
                    ".row-color {\n                width: 15px;\n                height: 15px;\n                display: inline-block;\n                position: relative;\n                top: 3px;\n                margin-right: 5px;\n                border-radius: 3px; }",
                    ".scrollable-menu {\n                height: auto;\n                overflow-x: hidden; }",
                    ".check-area {\n                width: 18px;\n                display: inline-block; }",
                    ".dropdown-multiselect-clickable {\n               cursor: pointer; }"],
                providers: [NgModel]
            },] },
];
DropdownMultiselectComponent.ctorParameters = function () { return [
    { type: NgModel, decorators: [{ type: Self },] },
]; };
DropdownMultiselectComponent.propDecorators = {
    'dropdownConfig': [{ type: Input },],
    'autoClose': [{ type: Input },],
};
//# sourceMappingURL=dropdown-multiselect.component.js.map